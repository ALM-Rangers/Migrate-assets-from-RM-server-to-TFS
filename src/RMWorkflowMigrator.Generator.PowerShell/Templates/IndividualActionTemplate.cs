// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.ALMRangers.RMWorkflowMigrator.Generator.PowerShell.Templates
{
    using System.Linq;
    using DataAccess.Model;
    using Microsoft.ALMRangers.RMWorkflowMigrator.Generator.PowerShell.Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class IndividualActionTemplate : IndividualActionTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n# ");
            
            #line 9 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.DisplayName));
            
            #line default
            #line hidden
            this.Write("\r\n# Parameters:    \r\n");
            
            #line 11 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
foreach (var configVar in action.ConfigurationVariables.Where(cv => cv.IsParameter)) {
            
            #line default
            #line hidden
            this.Write("  # ");
            
            #line 12 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configVar.RemappedName));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 12 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configVar.Value));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 13 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 14 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
if (action.IsComponent && action.ConfigurationVariables.Any(cv => !cv.IsParameter)) {
            
            #line default
            #line hidden
            this.Write("# Configuration Variables:\r\n");
            
            #line 16 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
foreach (var configVar in action.ConfigurationVariables.Where(cv => !cv.IsParameter)) {
            
            #line default
            #line hidden
            this.Write("  # ");
            
            #line 17 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configVar.RemappedName));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 17 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configVar.Value));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 18 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 19 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("try {\r\n    Write-Output \"Executing ");
            
            #line 21 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.DisplayName));
            
            #line default
            #line hidden
            this.Write("\"\r\n");
            
            #line 22 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
if (action.IsComponent) {
var hasConfigVariables = action.ConfigurationVariables.Any(cv => !cv.IsParameter);
var configVariables = action.ConfigurationVariables.Where(cv => !cv.IsParameter);
if (hasConfigVariables) {
            
            #line default
            #line hidden
            this.Write("    $configVariables = @{\r\n");
            
            #line 27 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
foreach (var configVariable in configVariables) {
            
            #line default
            #line hidden
            this.Write("        \"__");
            
            #line 28 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configVariable.OriginalName));
            
            #line default
            #line hidden
            this.Write("__\" = $");
            
            #line 28 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configVariable.RemappedName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 29 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 31 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
if ((action.VariableReplacementMethod == VariableReplacementMethod.BeforeInstallation || action.VariableReplacementMethod == VariableReplacementMethod.BeforeAndAfterInstallation) && hasConfigVariables) {
            
            #line default
            #line hidden
            this.Write("    # Perform token replacement before installation\r\n\t&\"$(join-path $DeployerTool" +
                    "sPath \"TokenizationScript.ps1\")\" -FilePath $ComponentPath");
            
            #line 34 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Sequence));
            
            #line default
            #line hidden
            this.Write(" -FileSpec \"");
            
            #line 34 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.FileExtensionFilter));
            
            #line default
            #line hidden
            this.Write("\" -Values $configVariables\r\n\r\n");
            
            #line 36 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
if (action.DeployerToolId != 0) {
            
            #line default
            #line hidden
            this.Write("    cd $ComponentPath");
            
            #line 38 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Sequence));
            
            #line default
            #line hidden
            this.Write("\r\n    &\"$(join-path $DeployerToolsPath \"");
            
            #line 39 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Command));
            
            #line default
            #line hidden
            this.Write("\")\" ");
            
            #line 39 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Arguments));
            
            #line default
            #line hidden
            this.Write("\r\n    cd $basePath    \r\n");
            
            #line 41 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
else {
            
            #line default
            #line hidden
            this.Write("    &\"$(join-path $DeployerToolsPath \"");
            
            #line 43 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Command));
            
            #line default
            #line hidden
            this.Write("\")\" ");
            
            #line 43 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Arguments));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 44 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 45 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
if ((action.VariableReplacementMethod == VariableReplacementMethod.AfterInstallation || action.VariableReplacementMethod == VariableReplacementMethod.BeforeAndAfterInstallation) && hasConfigVariables) {
var targetPath = action.ConfigurationVariables.First(cv => cv.OriginalName == "Installation Path").RemappedName;

            
            #line default
            #line hidden
            this.Write("\r\n    # Perform token replacement after installation\r\n    &\"$(join-path $Deployer" +
                    "ToolsPath \"TokenizationScript.ps1\")\" -FilePath $");
            
            #line 50 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetPath));
            
            #line default
            #line hidden
            this.Write(" -FileSpec \"");
            
            #line 50 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.FileExtensionFilter));
            
            #line default
            #line hidden
            this.Write("\" -Values $configVariables\r\n");
            
            #line 51 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 52 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
} else {
            
            #line default
            #line hidden
            
            #line 53 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
if (action.Command.StartsWith("powershell")) {
	if (action.Arguments.StartsWith(@"""&") || action.Arguments.StartsWith(@"-command ""&") || action.Arguments.StartsWith(@"-Command ""&")) {
            
            #line default
            #line hidden
            this.Write("\tpowershell ");
            
            #line 55 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Arguments));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 56 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
	else {
		var ps1Index = action.Arguments.IndexOf(".ps1")+4;
		var actualCommand = action.Arguments.Substring(0,ps1Index);
		var strippedArguments = action.Arguments.Replace(actualCommand, string.Empty);
		actualCommand = actualCommand.Replace("-command", string.Empty).Replace("-Command", string.Empty).Trim();
            
            #line default
            #line hidden
            this.Write("\tInvoke-Expression \"& `\"$(join-path $DeployerToolsPath \'");
            
            #line 62 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actualCommand));
            
            #line default
            #line hidden
            this.Write("\')`\" ");
            
            #line 62 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(strippedArguments));
            
            #line default
            #line hidden
            this.Write("\"\r\n");
            
            #line 63 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
}
else if (!action.CommandIsExtractedTool) {
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 66 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Command));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 66 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Arguments));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 67 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
else {
            
            #line default
            #line hidden
            this.Write("    &\"$(join-path $DeployerToolsPath \"");
            
            #line 69 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Command));
            
            #line default
            #line hidden
            this.Write("\")\" ");
            
            #line 69 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Arguments));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 70 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}}
            
            #line default
            #line hidden
            this.Write("}\r\ncatch {\r\n    Write-output \"");
            
            #line 73 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.DisplayName));
            
            #line default
            #line hidden
            this.Write(" failed. Error:\"\r\n    Write-output $_\r\n");
            
            #line 75 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
if (action.RollbackScripts.Any()) {
            
            #line default
            #line hidden
            this.Write("    Write-output \"Executing rollback script(s)\"\r\n");
            
            #line 77 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
if (action.IsComponent) { 
            
            #line default
            #line hidden
            this.Write("    cd $basePath\r\n");
            
            #line 79 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 80 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
foreach (var script in action.RollbackScripts) {
            
            #line default
            #line hidden
            this.Write("    .\\");
            
            #line 81 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(script.Key));
            
            #line default
            #line hidden
            this.Write(".ps1 ");
            
            #line 81 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" ", script.Value.OrderBy(rsa => rsa.Sequence).SelectMany(rsa => rsa.ConfigurationVariables).Where(s => !string.IsNullOrWhiteSpace(s.Value) && s.IsParameter).Distinct(new ConfigurationVariableEqualityComparer()).Select(s => "-" + s.RemappedName + " \"$" + s.RemappedName + "\""))));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 81 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" ", script.Value.Where(s => s.IsComponent).Select(c => $"-ComponentPath{c.Sequence} $ComponentPath{c.Sequence}"))));
            
            #line default
            #line hidden
            this.Write(" -DeployerToolsPath $DeployerToolsPath\r\n");
            
            #line 82 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 83 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    exit 1\r\n}\r\nWrite-Output \"\"\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Administrator\Documents\GitHubVisualStudio\Migrate-assets-from-RM-server-to-VSTS\src\RMWorkflowMigrator.Generator.PowerShell\Templates\IndividualActionTemplate.tt"

private global::Microsoft.ALMRangers.RMWorkflowMigrator.Generator.PowerShell.Model.ScriptAction _actionField;

/// <summary>
/// Access the action parameter of the template.
/// </summary>
private global::Microsoft.ALMRangers.RMWorkflowMigrator.Generator.PowerShell.Model.ScriptAction action
{
    get
    {
        return this._actionField;
    }
}

private global::System.Collections.Generic.IEnumerable<ScriptAction> _componentsField;

/// <summary>
/// Access the components parameter of the template.
/// </summary>
private global::System.Collections.Generic.IEnumerable<ScriptAction> components
{
    get
    {
        return this._componentsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool actionValueAcquired = false;
if (this.Session.ContainsKey("action"))
{
    this._actionField = ((global::Microsoft.ALMRangers.RMWorkflowMigrator.Generator.PowerShell.Model.ScriptAction)(this.Session["action"]));
    actionValueAcquired = true;
}
if ((actionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("action");
    if ((data != null))
    {
        this._actionField = ((global::Microsoft.ALMRangers.RMWorkflowMigrator.Generator.PowerShell.Model.ScriptAction)(data));
    }
}
bool componentsValueAcquired = false;
if (this.Session.ContainsKey("components"))
{
    this._componentsField = ((global::System.Collections.Generic.IEnumerable<ScriptAction>)(this.Session["components"]));
    componentsValueAcquired = true;
}
if ((componentsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("components");
    if ((data != null))
    {
        this._componentsField = ((global::System.Collections.Generic.IEnumerable<ScriptAction>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class IndividualActionTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
